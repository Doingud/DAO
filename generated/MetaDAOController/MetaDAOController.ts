// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MetaDAOController__indexesResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getIndexDenominator(): BigInt {
    return this.value1;
  }
}

export class MetaDAOController extends ethereum.SmartContract {
  static bind(address: Address): MetaDAOController {
    return new MetaDAOController("MetaDAOController", address);
  }

  FEES_INDEX(): Bytes {
    let result = super.call("FEES_INDEX", "FEES_INDEX():(bytes32)", []);

    return result[0].toBytes();
  }

  try_FEES_INDEX(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("FEES_INDEX", "FEES_INDEX():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SENTINEL(): Address {
    let result = super.call("SENTINEL", "SENTINEL():(address)", []);

    return result[0].toAddress();
  }

  try_SENTINEL(): ethereum.CallResult<Address> {
    let result = super.tryCall("SENTINEL", "SENTINEL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addIndex(weights: Array<Bytes>): BigInt {
    let result = super.call("addIndex", "addIndex(bytes[]):(uint256)", [
      ethereum.Value.fromBytesArray(weights)
    ]);

    return result[0].toBigInt();
  }

  try_addIndex(weights: Array<Bytes>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("addIndex", "addIndex(bytes[]):(uint256)", [
      ethereum.Value.fromBytesArray(weights)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  amorToken(): Address {
    let result = super.call("amorToken", "amorToken():(address)", []);

    return result[0].toAddress();
  }

  try_amorToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("amorToken", "amorToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  donations(param0: Address): BigInt {
    let result = super.call("donations", "donations(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_donations(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("donations", "donations(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guildAvatar(param0: Address): Address {
    let result = super.call("guildAvatar", "guildAvatar(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_guildAvatar(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "guildAvatar",
      "guildAvatar(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guildCounter(): BigInt {
    let result = super.call("guildCounter", "guildCounter():(uint32)", []);

    return result[0].toBigInt();
  }

  try_guildCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("guildCounter", "guildCounter():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guildFactory(): Address {
    let result = super.call("guildFactory", "guildFactory():(address)", []);

    return result[0].toAddress();
  }

  try_guildFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("guildFactory", "guildFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guildFees(param0: Address): BigInt {
    let result = super.call("guildFees", "guildFees(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_guildFees(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("guildFees", "guildFees(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guildFunds(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "guildFunds",
      "guildFunds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_guildFunds(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guildFunds",
      "guildFunds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guildWeight(param0: Address): BigInt {
    let result = super.call("guildWeight", "guildWeight(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_guildWeight(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guildWeight",
      "guildWeight(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guilds(param0: Address): Address {
    let result = super.call("guilds", "guilds(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_guilds(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("guilds", "guilds(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guildsTotalWeight(): BigInt {
    let result = super.call(
      "guildsTotalWeight",
      "guildsTotalWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_guildsTotalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guildsTotalWeight",
      "guildsTotalWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexHashes(param0: BigInt): Bytes {
    let result = super.call("indexHashes", "indexHashes(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_indexHashes(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "indexHashes",
      "indexHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  indexes(param0: Bytes): MetaDAOController__indexesResult {
    let result = super.call("indexes", "indexes(bytes32):(address,uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return new MetaDAOController__indexesResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_indexes(
    param0: Bytes
  ): ethereum.CallResult<MetaDAOController__indexesResult> {
    let result = super.tryCall(
      "indexes",
      "indexes(bytes32):(address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MetaDAOController__indexesResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  isWhitelisted(token: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sentinelGuilds(): Address {
    let result = super.call("sentinelGuilds", "sentinelGuilds():(address)", []);

    return result[0].toAddress();
  }

  try_sentinelGuilds(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sentinelGuilds",
      "sentinelGuilds():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sentinelWhitelist(): Address {
    let result = super.call(
      "sentinelWhitelist",
      "sentinelWhitelist():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_sentinelWhitelist(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sentinelWhitelist",
      "sentinelWhitelist():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateIndex(weights: Array<Bytes>, index: BigInt): BigInt {
    let result = super.call(
      "updateIndex",
      "updateIndex(bytes[],uint256):(uint256)",
      [
        ethereum.Value.fromBytesArray(weights),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_updateIndex(
    weights: Array<Bytes>,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateIndex",
      "updateIndex(bytes[],uint256):(uint256)",
      [
        ethereum.Value.fromBytesArray(weights),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelist(param0: Address): Address {
    let result = super.call("whitelist", "whitelist(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_whitelist(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("whitelist", "whitelist(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddExternalGuildCall extends ethereum.Call {
  get inputs(): AddExternalGuildCall__Inputs {
    return new AddExternalGuildCall__Inputs(this);
  }

  get outputs(): AddExternalGuildCall__Outputs {
    return new AddExternalGuildCall__Outputs(this);
  }
}

export class AddExternalGuildCall__Inputs {
  _call: AddExternalGuildCall;

  constructor(call: AddExternalGuildCall) {
    this._call = call;
  }

  get guildAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddExternalGuildCall__Outputs {
  _call: AddExternalGuildCall;

  constructor(call: AddExternalGuildCall) {
    this._call = call;
  }
}

export class AddIndexCall extends ethereum.Call {
  get inputs(): AddIndexCall__Inputs {
    return new AddIndexCall__Inputs(this);
  }

  get outputs(): AddIndexCall__Outputs {
    return new AddIndexCall__Outputs(this);
  }
}

export class AddIndexCall__Inputs {
  _call: AddIndexCall;

  constructor(call: AddIndexCall) {
    this._call = call;
  }

  get weights(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class AddIndexCall__Outputs {
  _call: AddIndexCall;

  constructor(call: AddIndexCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddWhitelistCall extends ethereum.Call {
  get inputs(): AddWhitelistCall__Inputs {
    return new AddWhitelistCall__Inputs(this);
  }

  get outputs(): AddWhitelistCall__Outputs {
    return new AddWhitelistCall__Outputs(this);
  }
}

export class AddWhitelistCall__Inputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhitelistCall__Outputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get guild(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimTokenCall extends ethereum.Call {
  get inputs(): ClaimTokenCall__Inputs {
    return new ClaimTokenCall__Inputs(this);
  }

  get outputs(): ClaimTokenCall__Outputs {
    return new ClaimTokenCall__Outputs(this);
  }
}

export class ClaimTokenCall__Inputs {
  _call: ClaimTokenCall;

  constructor(call: ClaimTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimTokenCall__Outputs {
  _call: ClaimTokenCall;

  constructor(call: ClaimTokenCall) {
    this._call = call;
  }
}

export class CreateGuildCall extends ethereum.Call {
  get inputs(): CreateGuildCall__Inputs {
    return new CreateGuildCall__Inputs(this);
  }

  get outputs(): CreateGuildCall__Outputs {
    return new CreateGuildCall__Outputs(this);
  }
}

export class CreateGuildCall__Inputs {
  _call: CreateGuildCall;

  constructor(call: CreateGuildCall) {
    this._call = call;
  }

  get guildOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateGuildCall__Outputs {
  _call: CreateGuildCall;

  constructor(call: CreateGuildCall) {
    this._call = call;
  }
}

export class DistributeFeesCall extends ethereum.Call {
  get inputs(): DistributeFeesCall__Inputs {
    return new DistributeFeesCall__Inputs(this);
  }

  get outputs(): DistributeFeesCall__Outputs {
    return new DistributeFeesCall__Outputs(this);
  }
}

export class DistributeFeesCall__Inputs {
  _call: DistributeFeesCall;

  constructor(call: DistributeFeesCall) {
    this._call = call;
  }
}

export class DistributeFeesCall__Outputs {
  _call: DistributeFeesCall;

  constructor(call: DistributeFeesCall) {
    this._call = call;
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get amor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cloneFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get avatar(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class RemoveGuildCall extends ethereum.Call {
  get inputs(): RemoveGuildCall__Inputs {
    return new RemoveGuildCall__Inputs(this);
  }

  get outputs(): RemoveGuildCall__Outputs {
    return new RemoveGuildCall__Outputs(this);
  }
}

export class RemoveGuildCall__Inputs {
  _call: RemoveGuildCall;

  constructor(call: RemoveGuildCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveGuildCall__Outputs {
  _call: RemoveGuildCall;

  constructor(call: RemoveGuildCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateIndexCall extends ethereum.Call {
  get inputs(): UpdateIndexCall__Inputs {
    return new UpdateIndexCall__Inputs(this);
  }

  get outputs(): UpdateIndexCall__Outputs {
    return new UpdateIndexCall__Outputs(this);
  }
}

export class UpdateIndexCall__Inputs {
  _call: UpdateIndexCall;

  constructor(call: UpdateIndexCall) {
    this._call = call;
  }

  get weights(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateIndexCall__Outputs {
  _call: UpdateIndexCall;

  constructor(call: UpdateIndexCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
