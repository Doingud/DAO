// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChangedGuardiansLimit extends ethereum.Event {
  get params(): ChangedGuardiansLimit__Params {
    return new ChangedGuardiansLimit__Params(this);
  }
}

export class ChangedGuardiansLimit__Params {
  _event: ChangedGuardiansLimit;

  constructor(event: ChangedGuardiansLimit) {
    this._event = event;
  }

  get newLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GovernorInitialized extends ethereum.Event {
  get params(): GovernorInitialized__Params {
    return new GovernorInitialized__Params(this);
  }
}

export class GovernorInitialized__Params {
  _event: GovernorInitialized;

  constructor(event: GovernorInitialized) {
    this._event = event;
  }

  get success(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get avatarAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get snapshotAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ProposalCanceled extends ethereum.Event {
  get params(): ProposalCanceled__Params {
    return new ProposalCanceled__Params(this);
  }
}

export class ProposalCanceled__Params {
  _event: ProposalCanceled;

  constructor(event: ProposalCanceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get targets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }

  get startBlock(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Governor extends ethereum.SmartContract {
  static bind(address: Address): Governor {
    return new Governor("Governor", address);
  }

  _name(): string {
    let result = super.call("_name", "_name():(string)", []);

    return result[0].toString();
  }

  try__name(): ethereum.CallResult<string> {
    let result = super.tryCall("_name", "_name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  avatarAddress(): Address {
    let result = super.call("avatarAddress", "avatarAddress():(address)", []);

    return result[0].toAddress();
  }

  try_avatarAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "avatarAddress",
      "avatarAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cancellers(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "cancellers",
      "cancellers(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_cancellers(param0: BigInt, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "cancellers",
      "cancellers(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  execute(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "execute",
      "execute(address[],uint256[],bytes[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas)
      ]
    );

    return result[0].toBigInt();
  }

  try_execute(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "execute",
      "execute(address[],uint256[],bytes[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guardians(param0: BigInt): Address {
    let result = super.call("guardians", "guardians(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_guardians(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("guardians", "guardians(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardiansLimit(): BigInt {
    let result = super.call("guardiansLimit", "guardiansLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_guardiansLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guardiansLimit",
      "guardiansLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas)
      ]
    );

    return result[0].toBigInt();
  }

  try_hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  init(
    name: string,
    AMORxGuild_: Address,
    snapshotAddress_: Address,
    avatarAddress_: Address
  ): boolean {
    let result = super.call(
      "init",
      "init(string,address,address,address):(bool)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(AMORxGuild_),
        ethereum.Value.fromAddress(snapshotAddress_),
        ethereum.Value.fromAddress(avatarAddress_)
      ]
    );

    return result[0].toBoolean();
  }

  try_init(
    name: string,
    AMORxGuild_: Address,
    snapshotAddress_: Address,
    avatarAddress_: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "init",
      "init(string,address,address,address):(bool)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(AMORxGuild_),
        ethereum.Value.fromAddress(snapshotAddress_),
        ethereum.Value.fromAddress(avatarAddress_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposalCancelApproval(param0: BigInt): BigInt {
    let result = super.call(
      "proposalCancelApproval",
      "proposalCancelApproval(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_proposalCancelApproval(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCancelApproval",
      "proposalCancelApproval(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalMaxOperations(): BigInt {
    let result = super.call(
      "proposalMaxOperations",
      "proposalMaxOperations():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalMaxOperations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalMaxOperations",
      "proposalMaxOperations():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalVoting(param0: BigInt): BigInt {
    let result = super.call(
      "proposalVoting",
      "proposalVoting(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_proposalVoting(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalVoting",
      "proposalVoting(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalWeight(param0: BigInt): BigInt {
    let result = super.call(
      "proposalWeight",
      "proposalWeight(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_proposalWeight(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalWeight",
      "proposalWeight(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposals(param0: BigInt): BigInt {
    let result = super.call("proposals", "proposals(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_proposals(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("proposals", "proposals(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "propose",
      "propose(address[],uint256[],bytes[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas)
      ]
    );

    return result[0].toBigInt();
  }

  try_propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "propose",
      "propose(address[],uint256[],bytes[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  snapshotAddress(): Address {
    let result = super.call(
      "snapshotAddress",
      "snapshotAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_snapshotAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "snapshotAddress",
      "snapshotAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  state(proposalId: BigInt): i32 {
    let result = super.call("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toI32();
  }

  try_state(proposalId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  voters(param0: BigInt, param1: BigInt): Address {
    let result = super.call("voters", "voters(uint256,uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_voters(param0: BigInt, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("voters", "voters(uint256,uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votingDelay(): BigInt {
    let result = super.call("votingDelay", "votingDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingDelay", "votingDelay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weights(param0: Address): BigInt {
    let result = super.call("weights", "weights(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_weights(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weights", "weights(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddGuardianCall extends ethereum.Call {
  get inputs(): AddGuardianCall__Inputs {
    return new AddGuardianCall__Inputs(this);
  }

  get outputs(): AddGuardianCall__Outputs {
    return new AddGuardianCall__Outputs(this);
  }
}

export class AddGuardianCall__Inputs {
  _call: AddGuardianCall;

  constructor(call: AddGuardianCall) {
    this._call = call;
  }

  get guardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddGuardianCall__Outputs {
  _call: AddGuardianCall;

  constructor(call: AddGuardianCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }
}

export class CastVoteForCancellingCall extends ethereum.Call {
  get inputs(): CastVoteForCancellingCall__Inputs {
    return new CastVoteForCancellingCall__Inputs(this);
  }

  get outputs(): CastVoteForCancellingCall__Outputs {
    return new CastVoteForCancellingCall__Outputs(this);
  }
}

export class CastVoteForCancellingCall__Inputs {
  _call: CastVoteForCancellingCall;

  constructor(call: CastVoteForCancellingCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CastVoteForCancellingCall__Outputs {
  _call: CastVoteForCancellingCall;

  constructor(call: CastVoteForCancellingCall) {
    this._call = call;
  }
}

export class ChangeGuardianCall extends ethereum.Call {
  get inputs(): ChangeGuardianCall__Inputs {
    return new ChangeGuardianCall__Inputs(this);
  }

  get outputs(): ChangeGuardianCall__Outputs {
    return new ChangeGuardianCall__Outputs(this);
  }
}

export class ChangeGuardianCall__Inputs {
  _call: ChangeGuardianCall;

  constructor(call: ChangeGuardianCall) {
    this._call = call;
  }

  get current(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newGuardian(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeGuardianCall__Outputs {
  _call: ChangeGuardianCall;

  constructor(call: ChangeGuardianCall) {
    this._call = call;
  }
}

export class ChangeGuardiansLimitCall extends ethereum.Call {
  get inputs(): ChangeGuardiansLimitCall__Inputs {
    return new ChangeGuardiansLimitCall__Inputs(this);
  }

  get outputs(): ChangeGuardiansLimitCall__Outputs {
    return new ChangeGuardiansLimitCall__Outputs(this);
  }
}

export class ChangeGuardiansLimitCall__Inputs {
  _call: ChangeGuardiansLimitCall;

  constructor(call: ChangeGuardiansLimitCall) {
    this._call = call;
  }

  get newLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeGuardiansLimitCall__Outputs {
  _call: ChangeGuardiansLimitCall;

  constructor(call: ChangeGuardiansLimitCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get AMORxGuild_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get snapshotAddress_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get avatarAddress_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ProposeCall extends ethereum.Call {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveGuardianCall extends ethereum.Call {
  get inputs(): RemoveGuardianCall__Inputs {
    return new RemoveGuardianCall__Inputs(this);
  }

  get outputs(): RemoveGuardianCall__Outputs {
    return new RemoveGuardianCall__Outputs(this);
  }
}

export class RemoveGuardianCall__Inputs {
  _call: RemoveGuardianCall;

  constructor(call: RemoveGuardianCall) {
    this._call = call;
  }

  get guardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveGuardianCall__Outputs {
  _call: RemoveGuardianCall;

  constructor(call: RemoveGuardianCall) {
    this._call = call;
  }
}

export class SetGuardiansCall extends ethereum.Call {
  get inputs(): SetGuardiansCall__Inputs {
    return new SetGuardiansCall__Inputs(this);
  }

  get outputs(): SetGuardiansCall__Outputs {
    return new SetGuardiansCall__Outputs(this);
  }
}

export class SetGuardiansCall__Inputs {
  _call: SetGuardiansCall;

  constructor(call: SetGuardiansCall) {
    this._call = call;
  }

  get arrGuardians(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetGuardiansCall__Outputs {
  _call: SetGuardiansCall;

  constructor(call: SetGuardiansCall) {
    this._call = call;
  }
}
